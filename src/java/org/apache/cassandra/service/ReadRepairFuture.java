/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.cassandra.service;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiConsumer;

import com.google.common.annotations.VisibleForTesting;

import org.apache.cassandra.net.EmptyPayload;
import org.apache.cassandra.net.FailureResponse;
import org.apache.cassandra.net.MessageCallback;
import org.apache.cassandra.net.Response;

/**
 * A callback used to wait on read repair results.
 * <p>
 * Read repair works by sending individual repairs (if any) on each partition and to each node as soon as it is computed.
 * Then we want to wait on successful answers from all those repairs. This class makes this easy: each individual repair
 * uses a callback generated by {@link #newRepairMessageCallback()} and this keeps tracks of how many have been
 * created and when they return successfully.
 * <p>
 * Please note that the class relies on all calls to {@link #newRepairMessageCallback()} being done <b>before</b> the
 * result of this future is waited on with {@link #get} (more precisely, any call to {@link #newRepairMessageCallback()}
 * made after a call to {@link #get} has been done will be basically ignored).
 * <p>
 * Also note that any error or timeout of the individual repair is counted as a lack of response, which means in practice
 * that 1) {@link #get} won't throw {@link ExecutionException} (with the exception of cancellation) and 2) the future will
 * only return if all repairs are successful, so it should always be waited on with a timeout (in fact, {@link #get()}
 * is unsupported to avoid mistakes).
 */
class ReadRepairFuture extends CompletableFuture<Void>
{
    private final AtomicInteger outstandingRepairs = new AtomicInteger();

    @Override
    public Void get()
    {
        throw new UnsupportedOperationException();
    }

    @Override
    public Void get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException
    {
        throw new UnsupportedOperationException();
    }

    public CompletableFuture<Void> whenComplete(BiConsumer<? super Void, ? super Throwable> action) {
        // It's possible we sent no repair at all, so if we're at 0 when we call this, force the future to complete.
        // Note that if we did send repairs and they simply alread all returned, this is a no-op which is fine.
        if (outstandingRepairs.get() == 0)
            complete(null);

        return super.whenComplete(action);
    }

    MessageCallback<EmptyPayload> newRepairMessageCallback()
    {
        outstandingRepairs.incrementAndGet();
        return new MessageCallback<EmptyPayload>()
        {
            public void onResponse(Response<EmptyPayload> response)
            {
                ReadRepairFuture.this.onResponse();
            }

            public void onFailure(FailureResponse<EmptyPayload> response)
            {
                // Ignore, see class javadoc.
            }
        };
    }

    @VisibleForTesting
    int outstandingRepairs()
    {
        return outstandingRepairs.get();
    }

    @VisibleForTesting
    void onResponse()
    {
        if (outstandingRepairs.decrementAndGet() == 0)
            complete(null);
    }
}
